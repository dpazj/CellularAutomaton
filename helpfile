CellularAutomaton by Joe Riemersma and Claire Sommerville
This application produces a basic Cellular Automaton.

CLI Arguments:
	./CA [-db=<'decimal'] [-bd] [[-a] [[-i=<'sequenceSize'>][-d=<'sequenceSize'>][-c]] [[-i=<'ruleset'>][-d][-c]] [[-i=<'repetitions'][-sl=<'repetitions'>]] [-s=<'outputfile'>] [-w]]

	-help:
		Displays help file.

	-db | --decimalbin:
		Converts decimal number to binary.

	-bd | --bindecimal:
		Converts binary number to decimal.

	-a | --automaton:
		Cell automaton feature. Must be followed by three arguments.

	Argument 1:
		-i='sequenceSize' | --input:
			Specifies how many bits the initial and subsequent rows will contain.
			Will create a random sequence with 'sequenceSize' number of bits.

		-d='sequenceSize' | --default:
			Specifies how many bits the initial and subsequent rows will contain.
			Will use a default sequence containing a single '1' in the middle of the
			sequence. Sequence will contain 'sequenceSize' number of bits.

		-c | --custom:
			User enters their own custom sequence

	Argument 2:
		-i='ruleset' | --input:
			Specifies what ruleset will be used in the generation of child sequences.
			A binary bitset will be created from integer 'ruleset'.

		-d | --default:
			Ruleset will use default value of '30' - '00011110'.

		-c | --custom:
			User enters their own custom bitset.

	Argument 3:
		-i='repetitions' | --input:
			Specifies the number of different sequences the program will produce.
			Will produce 'repeitions' number of times.

		-sl='repetitions' | --singleline: 
			Specifies the number of different sequences the program will produce. 
			Will only show next sequence when user presses a key. Will produce 'repeitions' number of times.

	Options:
		-s='outputfile' | --save:
			Writes the generated sequences to 'file1'.

		-w | --wrap:
			Wraps sides around to other side.
			Note: this setting is off by defualt.




